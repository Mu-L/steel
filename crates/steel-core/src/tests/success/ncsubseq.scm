(define (ncsubseq lst)
  (let recurse ([s 0] [lst lst])
    (if (null? lst)
        (if (>= s 3) '(()) '())
        (let ([x (car lst)] [xs (cdr lst)])
          (if (even? s)
              (append (map (lambda (ys) (cons x ys)) (recurse (+ s 1) xs)) (recurse s xs))
              (append (map (lambda (ys) (cons x ys)) (recurse s xs)) (recurse (+ s 1) xs)))))))

(assert! (equal? (ncsubseq '(1 2 3)) '((1 3))))
(assert! (equal? (ncsubseq '(1 2 3 4)) '((1 2 4) (1 3 4) (1 3) (1 4) (2 4))))
(assert! (equal? (ncsubseq '(1 2 3 4 5))
                 '((1 2 3 5) (1 2 4 5)
                             (1 2 4)
                             (1 2 5)
                             (1 3 4 5)
                             (1 3 4)
                             (1 3 5)
                             (1 3)
                             (1 4 5)
                             (1 4)
                             (1 5)
                             (2 3 5)
                             (2 4 5)
                             (2 4)
                             (2 5)
                             (3 5))))
