(define (insert l n e)
  (if (= 0 n) (cons e l) (cons (car l) (insert (cdr l) (- n 1) e))))

(define (seq start end)
  (if (= start end) (list end) (cons start (seq (+ start 1) end))))

(define (permute l)
  (if (null? l)
      '(())
      (apply append
             (map (lambda (p) (map (lambda (n) (insert p n (car l))) (seq 0 (length p))))
                  (permute (cdr l))))))

(assert! (equal? (permute (range 0 2)) '((0 1) (1 0))))

(assert! (equal? (permute (range 0 3)) '((0 1 2) (1 0 2) (1 2 0) (0 2 1) (2 0 1) (2 1 0))))

(assert! (equal? (permute (range 0 4))
                 '((0 1 2 3) (1 0 2 3)
                             (1 2 0 3)
                             (1 2 3 0)
                             (0 2 1 3)
                             (2 0 1 3)
                             (2 1 0 3)
                             (2 1 3 0)
                             (0 2 3 1)
                             (2 0 3 1)
                             (2 3 0 1)
                             (2 3 1 0)
                             (0 1 3 2)
                             (1 0 3 2)
                             (1 3 0 2)
                             (1 3 2 0)
                             (0 3 1 2)
                             (3 0 1 2)
                             (3 1 0 2)
                             (3 1 2 0)
                             (0 3 2 1)
                             (3 0 2 1)
                             (3 2 0 1)
                             (3 2 1 0))))
