# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc ba3b075e91322e3a6e4878469f37d211442105338985ca85c3cb156b4ab55a29 # shrinks to expr = If(If { test_expr: If(If { test_expr: Atom(Atom { syn: SyntaxObject { ty: IntegerLiteral(-872414935), span: 0..0 } }), then_expr: Atom(Atom { syn: SyntaxObject { ty: IntegerLiteral(-6578869408395709287), span: 0..0 } }), else_expr: Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('*'), span: 0..0 } }), location: SyntaxObject { ty: If, span: 0..0 } }), then_expr: Atom(Atom { syn: SyntaxObject { ty: IntegerLiteral(-5947150424354642015), span: 0..0 } }), else_expr: Define(Define { name: Atom(Atom { syn: SyntaxObject { ty: Identifier("\"เ🂨\\*ퟡ´.:{𞋌ȺࡒæTנּଏ<Ѩ\u{10eac}"), span: 0..0 } }), body: List(List { args: [] }), location: SyntaxObject { ty: Define, span: 0..0 } }), location: SyntaxObject { ty: If, span: 0..0 } })
cc 6b6adf8a923572bb82a42c4ddf33909eae18c658502a8b8958d53d2031c0cb5d # shrinks to expr = Define(Define { name: Atom(Atom { syn: SyntaxObject { ty: Identifier(""), span: 0..0 } }), body: List(List { args: [] }), location: SyntaxObject { ty: Define, span: 0..0 } })
cc b028dc7dfaf0d7ca9df1f64d35838bfc3407e1f224caa4606d300fb6a57ec0eb # shrinks to expr = Begin(Begin { exprs: [], location: SyntaxObject { ty: Begin, span: 0..0 } })
cc 3d322ed8345904bf0c0af3c68dabd7befa587b545c2ff80461a0afe428cc13bc # shrinks to expr = Define(Define { name: Atom(Atom { syn: SyntaxObject { ty: Identifier("%"), span: 0..0 } }), body: List(List { args: [Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('\t'), span: 0..0 } })] }), location: SyntaxObject { ty: Define, span: 0..0 } })
cc d15757be8c5d41a904a9d8f77f3d688f29a77017272ed014ac40aa99584fcb2d # shrinks to expr = List(List { args: [Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('\u{b}'), span: 0..0 } })] })
cc 116ff47f68040a770afb3636206ddb98bde9136e5002e56d53a0f982d7cad00b # shrinks to expr = Define(Define { name: Atom(Atom { syn: SyntaxObject { ty: Identifier("a"), span: 0..0 } }), body: List(List { args: [Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral(')'), span: 0..0 } })] }), location: SyntaxObject { ty: Define, span: 0..0 } })
cc 2c4a70561f7d1499463c242766fc24ba7324882b8e32dab9353b0dbe37bee274 # shrinks to expr = If(If { test_expr: Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('¡'), span: 0..0 } }), then_expr: Quote(Quote { expr: List(List { args: [] }), location: SyntaxObject { ty: Quote, span: 0..0 } }), else_expr: Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral(' '), span: 0..0 } }), location: SyntaxObject { ty: If, span: 0..0 } })
cc 57a7a2bb7057027666f1e06b2372fe6c74d2b1404b57ef484c03a03526b78ce3 # shrinks to expr = Define(Define { name: Atom(Atom { syn: SyntaxObject { ty: Identifier("A"), span: 0..0 } }), body: List(List { args: [List(List { args: [Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('\u{a0}'), span: 0..0 } })] })] }), location: SyntaxObject { ty: Define, span: 0..0 } })
cc 2d1240d5e780d1d7b07ff30fd590d4cc93e5559e2950d43c1c36d337eb687e75 # shrinks to expr = Define(Define { name: Atom(Atom { syn: SyntaxObject { ty: Identifier("🤌"), span: 0..0 } }), body: List(List { args: [If(If { test_expr: Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('^'), span: 0..0 } }), then_expr: Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('\u{0}'), span: 0..0 } }), else_expr: Atom(Atom { syn: SyntaxObject { ty: CharacterLiteral('¡'), span: 0..0 } }), location: SyntaxObject { ty: If, span: 0..0 } })] }), location: SyntaxObject { ty: Define, span: 0..0 } })
